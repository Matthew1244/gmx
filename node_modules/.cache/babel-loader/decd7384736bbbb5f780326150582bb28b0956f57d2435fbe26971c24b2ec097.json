{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Master\\\\Desktop\\\\gmx\\\\src\\\\components\\\\Loading.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n// Importing loader\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\nimport ClockLoader from \"react-spinners/ClockLoader\";\n// import './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Loading = () => {\n  _s();\n  // Loading state \n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // Wait for 3 seconds\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 3000);\n  }, []);\n\n  // Custom css for loader\n  const override = `\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n  align-items: center;\n`;\n  return isLoading ?\n  /*#__PURE__*/\n  // If page is still loading then splash screen\n  _jsxDEV(PacmanLoader, {\n    color: '#36D7B7',\n    isLoading: isLoading,\n    css: override,\n    size: 150\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(ClockLoader, {\n      color: '#36D7B7',\n      isLoading: isLoading,\n      css: override,\n      size: 150\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 14\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(Loading, \"Yt82d/dvZsn5nYh5sqDQjv+rJ38=\");\n_c = Loading;\nexport default Loading;\nvar _c;\n$RefreshReg$(_c, \"Loading\");","map":{"version":3,"names":["React","useState","useEffect","PacmanLoader","ClockLoader","jsxDEV","_jsxDEV","Loading","_s","isLoading","setIsLoading","setTimeout","override","color","css","size","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["C:/Users/Master/Desktop/gmx/src/components/Loading.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n \r\n// Importing loader\r\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\r\nimport ClockLoader from \"react-spinners/ClockLoader\";\r\n// import './App.css';\r\n \r\nconst Loading = () => {\r\n \r\n    // Loading state \r\n    const [isLoading, setIsLoading] = useState(true);\r\n \r\n    useEffect(() => {\r\n \r\n        // Wait for 3 seconds\r\n        setTimeout(() => {\r\n            setIsLoading(false);\r\n        }, 3000);\r\n    }, []);\r\n \r\n    // Custom css for loader\r\n    const override = `\r\n  display: block;\r\n  margin: 0 auto;\r\n  border-color: red;\r\n  align-items: center;\r\n`;\r\n \r\n    return isLoading ?\r\n \r\n        // If page is still loading then splash screen\r\n        <PacmanLoader color={'#36D7B7'} isLoading={isLoading}\r\n            css={override} size={150} /> :\r\n        <h1 className=\"App\">\r\n            \r\n            {<ClockLoader color={'#36D7B7'} isLoading={isLoading}\r\n                css={override} size={150} />}\r\n        </h1>\r\n}\r\n \r\nexport default Loading;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAElD;AACA,OAAOC,YAAY,MAAM,6BAA6B;AACtD,OAAOC,WAAW,MAAM,4BAA4B;AACpD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAElB;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IAEZ;IACAS,UAAU,CAAC,MAAM;MACbD,YAAY,CAAC,KAAK,CAAC;IACvB,CAAC,EAAE,IAAI,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,QAAQ,GAAI;AACtB;AACA;AACA;AACA;AACA,CAAC;EAEG,OAAOH,SAAS;EAAA;EAEZ;EACAH,OAAA,CAACH,YAAY;IAACU,KAAK,EAAE,SAAU;IAACJ,SAAS,EAAEA,SAAU;IACjDK,GAAG,EAAEF,QAAS;IAACG,IAAI,EAAE;EAAI;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,gBAChCb,OAAA;IAAIc,SAAS,EAAC,KAAK;IAAAC,QAAA,eAEdf,OAAA,CAACF,WAAW;MAACS,KAAK,EAAE,SAAU;MAACJ,SAAS,EAAEA,SAAU;MACjDK,GAAG,EAAEF,QAAS;MAACG,IAAI,EAAE;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AACb,CAAC;AAAAX,EAAA,CA/BKD,OAAO;AAAAe,EAAA,GAAPf,OAAO;AAiCb,eAAeA,OAAO;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}